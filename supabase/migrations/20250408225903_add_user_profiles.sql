create table if not exists "public"."userprofile" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "resume" jsonb,
    "settings" jsonb not null default '{}'::jsonb,
    "user_id" uuid
);

-- Enable RLS (only if not already enabled)
alter table "public"."userprofile" enable row level security;

-- Primary Key via index
do $$
begin
    if not exists (
        select 1 from pg_indexes
        where schemaname = 'public'
        and indexname = 'userprofile_pkey'
    ) then
        create unique index userprofile_pkey on public.userprofile (id);
        alter table "public"."userprofile" add constraint "userprofile_pkey" primary key using index "userprofile_pkey";
    end if;
end $$;

-- Foreign Key (check if not already added)
do $$
begin
    if not exists (
        select 1 from information_schema.table_constraints
        where constraint_type = 'FOREIGN KEY'
        and constraint_name = 'userprofile_user_id_fkey'
    ) then
        alter table "public"."userprofile"
        add constraint "userprofile_user_id_fkey"
        foreign key (user_id) references auth.users(id) not valid;
        alter table "public"."userprofile"
        validate constraint "userprofile_user_id_fkey";
    end if;
end $$;

-- Permissions (repeat-safe grants)
grant delete, insert, references, select, trigger, truncate, update
    on table "public"."userprofile" to "anon", "authenticated", "service_role";
